#include "pybind11/pybind11.h"
#include "pybind11/stl.h" // for auto STL conversions
#include "pybind11/operators.h" // for py::self conversions
#include "pybind11/cast.h"
#include "rr/rrRoadRunner.h"

#include "evoRateLaw.h"
#include "NetworkComponent.h"
#include "RNG.h"
#include "RNGOptions.h"
#include "RoleTypes.h"
#include "StoicCounter.h"


namespace py = pybind11;
using namespace rr;
using namespace evo;

unsigned long long asPtr(RoadRunner& r){
    return reinterpret_cast<unsigned long long>(&r);
}
/**
 * I may need to extend this but I'm reluctant.
 * I want a way to port a roadrunner instance generated by this
 * program to the official roadrunner release in Python.
 */


PYBIND11_MODULE(evogen, m){
    py::class_<RoadRunner>(m, "RoadRunner")
            .def(py::init<unsigned int, unsigned int>(),
                    py::arg("level") = 3, py::arg("version") = 2)
            .def(py::init<const RoadRunner&>(), py::arg("rr"))
            .def("_asPtr", &asPtr)
            .def("getSBML", &RoadRunner::getSBML,
                    py::arg("level") = 0, py::arg("version") = 0)
            .def("getInstanceID", &RoadRunner::getInstanceID)
            .def("getInstanceCount", &RoadRunner::getInstanceCount)
            .def("getInfo", &RoadRunner::getInfo)
            .def("getModelName", &RoadRunner::getModelName) ;

    py::enum_<eRoleType>(m, "eRoleType")
            .value("substrate", eRoleType::EVO_SUBSTRATE)
            .value("product", eRoleType::EVO_PRODUCT)
            .value("modifier", eRoleType::EVO_MODIFIER)
            .value("parameter", eRoleType::EVO_PARAMETER);


    py::class_<evoRateLaw>(m, "RateLaw")
            .def(py::init<std::string, const std::string &, RoleMap>())
            .def("getRateLawElements", &evoRateLaw::getRateLawElements)
            .def("getName", &evoRateLaw::getName)
            .def("getRoles", &evoRateLaw::getRoles)
            .def("getRateLawString", &evoRateLaw::getRateLawString)
            .def("numParameters", &evoRateLaw::numParameters)
            .def("numSubstrates", &evoRateLaw::numSubstrates)
            .def("numProducts", &evoRateLaw::numProducts)
            .def("numModifiers", &evoRateLaw::numModifiers)
            .def("__eq__",
                 [](const evoRateLaw &a, const evoRateLaw &b) {
                     return a == b;
                 })
            .def("__ne__",
                 [](const evoRateLaw &a, const evoRateLaw &b) {
                     return a != b;
                 })
             .def("__repr__",
                 [](const evoRateLaw& rateLaw) {
                     return "<RateLaw: " +rateLaw.getName()+ "=" + rateLaw.getRateLawString() +">";
                 });

    py::class_<RNGOptions>(m, "RNGOptions")
            .def(py::init<RateLaws>())
            .def("getCoreSBML", &RNGOptions::getCoreSBML)
            .def("setCoreSBML", &RNGOptions::setCoreSBML)
            .def("getSeed", &RNGOptions::getSeed)
            .def("setSeed", &RNGOptions::setSeed)
            .def("getBoundarySpeciesLowerBound", &RNGOptions::getBoundarySpeciesLowerBound)
            .def("setBoundarySpeciesLowerBound", &RNGOptions::setBoundarySpeciesLowerBound)
            .def("getBoundarySpeciesUpperBound", &RNGOptions::getBoundarySpeciesUpperBound)
            .def("setBoundarySpeciesUpperBound", &RNGOptions::setBoundarySpeciesUpperBound)
            .def("getNFloatingSpecies", &RNGOptions::getNFloatingSpecies)
            .def("setNFloatingSpecies", &RNGOptions::setNFloatingSpecies)
            .def("getNBoundarySpecies", &RNGOptions::getNBoundarySpecies)
            .def("setNBoundarySpecies", &RNGOptions::setNBoundarySpecies)
            .def("getNReactions", &RNGOptions::getNReactions)
            .def("setNReactions", &RNGOptions::setNReactions)
            .def("getNCompartments", &RNGOptions::getNCompartments)
            .def("setNCompartments", &RNGOptions::setNCompartments)
            .def("getFloatingSpeciesLowerBound", &RNGOptions::getFloatingSpeciesLowerBound)
            .def("setFloatingSpeciesLowerBound", &RNGOptions::setFloatingSpeciesLowerBound)
            .def("getFloatingSpeciesUpperBound", &RNGOptions::getFloatingSpeciesUpperBound)
            .def("setFloatingSpeciesUpperBound", &RNGOptions::setFloatingSpeciesUpperBound)
            .def("getParameterLowerBound", &RNGOptions::getParameterLowerBound)
            .def("setParameterLowerBound", &RNGOptions::setParameterLowerBound)
            .def("getParameterUpperBound", &RNGOptions::getParameterUpperBound)
            .def("setParameterUpperBound", &RNGOptions::setParameterUpperBound)
            .def("getCompartmentLowerBound", &RNGOptions::getCompartmentLowerBound)
            .def("setCompartmentLowerBound", &RNGOptions::setCompartmentLowerBound)
            .def("getCompartmentUpperBound", &RNGOptions::getCompartmentUpperBound)
            .def("setCompartmentUpperBound", &RNGOptions::setCompartmentUpperBound)
            .def("getRateLaws", &RNGOptions::getRateLaws)
            .def("setRateLaws", &RNGOptions::setRateLaws);

    py::class_<RNGAbstract>(m, "RNGAbstract");

    py::class_<BasicRNG, RNGAbstract>(m, "BasicRNG")
            .def(py::init<const RNGOptions&>())
            .def("generate", py::overload_cast<>(&BasicRNG::generate))
            .def("generateMPI", py::overload_cast<int>(&BasicRNG::generate))
            .def("generate", py::overload_cast<int>(&BasicRNG::generate));

    py::class_<UniqueReactionsRNG, RNGAbstract>(m, "UniqueReactionsRNG")
            .def(py::init<const RNGOptions&>())
            .def("generate", py::overload_cast<>(&UniqueReactionsRNG::generate))
            .def("generateMPI", py::overload_cast<int>(&UniqueReactionsRNG::generate))
            .def("generate", py::overload_cast<int>(&UniqueReactionsRNG::generate));

    py::enum_<eRNG>(m, "eRNG")
            .value("basic", eRNG::BASIC)
            .value("unique_reactions", eRNG::UNIQUE_REACTIONS);

    m.def("massActionRateLaws", &massActionRateLaws);

    m.def("RNGFactory", &RNGFactory,
        py::arg("options") = RNGOptions(massActionRateLaws()),
        py::arg("which") = eRNG::BASIC);

}















