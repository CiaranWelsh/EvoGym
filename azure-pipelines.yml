# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml
name: $(Date:yyyyMMdd)$(Rev:.r)
trigger:
  - master
  - develop

pr:
  - master
  - develop

stages:
  - stage: BuildEvogen
    jobs:
      - job: BuildEvogenLinux
        timeoutInMinutes: "0"
        displayName: Linux
        continueOnError: "false"
        pool:
          vmImage: "ubuntu-18.04"

        strategy:
          matrix:
            64-bit Linux Release:
              BuildType: Release
              roadrunner_install_prefix: "$(Build.BinariesDirectory)/roadrunner-install-azure-release"
            64-bit Linux Debug:
              BuildType: Debug
              roadrunner_install_prefix: "$(Build.BinariesDirectory)/roadrunner-install-azure-debug"
        steps:
          - checkout: self
            submodules: recursive
          - script: |
              echo "pwd: $(pwd)"
              ls -R

           # we cannot upload prebuilt binaries onto github for linux debug version because of github file size limits.
          # therefore we do this build with Release llvm for both debug and release. Oddly enough it seems to work.
          - script: |
              echo "current driectory is: "
              pwd
              echo "doing ls"
              ls -lh
              echo "Agent.HomeDirectory $(Agent.HomeDirectory)"
              echo "Agent.BuildDirectory $(Agent.BuildDirectory)"
              wget https://github.com/sys-bio/llvm-6.x/releases/download/release%2F6.x/llvm-6.x-gcc7.5-x64-release.tar.gz
              tar -zxvf llvm-6.x-gcc7.5-x64-release.tar.gz
              ls
            displayName: "Get LLVM"

          - script: |
              echo "current driectory is: "
              pwd
              echo "doing ls"
              ls -lh
              echo "Agent.HomeDirectory $(Agent.HomeDirectory)"
              echo "Agent.BuildDirectory $(Agent.BuildDirectory)"
              wget https://dl.bintray.com/boostorg/release/1.74.0/source/boost_1_74_0.tar.gz
              tar -zxvf boost_1_74_0.tar.gz
              ls
            displayName: "Get Boost"

          - script: |
              echo "current driectory is: "
              pwd
              echo "doing ls"
              ls -lh
              echo "Cd to $(Agent.BuildDirectory)/s/"
              cd $(Agent.BuildDirectory)/s
              wget https://github.com/CiaranWelsh/roadrunner-deps/releases/download/v2.0.1/roadrunner-deps-gcc7.5-x64-release.tar.gz
              tar -zxvf roadrunner-deps-gcc7.5-x64-release.tar.gz
              ls
            displayName: "Get Dependencies"

          - script: |
              echo "current driectory is: "
              pwd
              echo "doing ls"
              ls -lh
              echo "Cd to $(Agent.BuildDirectory)/s/"
              cd $(Agent.BuildDirectory)/s
              git clone https://github.com/sys-bio/roadrunner.git
              cd roadrunner 
              mkdir build 
              cd build 
              cmake -DCMAKE_INSTALL_PREFIX="$(roadrunner_install_prefix)" -DRR_DEPENDENCIES_INSTALL_PREFIX="$(Agent.BuildDirectory)/s/roadrunner-deps-gcc7.5-x64-release" -DLLVM_INSTALL_PREFIX="$(Agent.BuildDirectory)/s/llvm-6.x-gcc7.5-x64-release" -DCMAKE_BUILD_TYPE=$(BuildType)  ..
              cmake --build . --target install --config Release -j 12
              ls
            displayName: "Build Roadrunner"

          - script: conda create --yes --name py38 python=3.8
            displayName: Create Anaconda environment
          - script: conda env list
            displayName:  environment installation verification
          - script: |
              echo "conda shell.bash hook: $(conda shell.bash hook)"
              eval "$(conda shell.bash hook)"
              conda activate py38
              conda install -y numpy
              cd /home/vsts/work/1/s
              echo "pwd: $(pwd)"
              echo "which python $(which python)"
              mkdir build
              cd build
              cmake -DROADRUNNER_INSTALL_PREFIX="$(roadrunner_install_prefix)" -DLLVM_INSTALL_PREFIX="../llvm-6.x-gcc7.5-x64-release" -DCMAKE_BUILD_TYPE=$(BuildType)  -DCMAKE_INSTALL_PREFIX=../install-azure-release -DBOOST_INSTALL_PREFIX=../boost_1_74_0 -DPython_ROOT_DIR=/usr/share/miniconda/envs/py38 ..
            displayName: ConfigureEvogenBuild
          - script: |
              cd /home/vsts/work/1/s/build
              cmake --build . --target install --config $(BuildType) -j 12
            displayName: BuildEvogenBuild
          - script: |
              conda activate py38
              cd /home/vsts/work/1/s/build
              echo "running ctest"
              ctest --verbose --extra-verbose --progress .
              echo "running python tests"
            displayName: Run C++ Tests

          - script: |
              conda activate py38
              cd /home/vsts/work/1/s/install-azure-release
              python setup.py bdist_wheel
              echo "ls dist: $(ls dist)"
              pip install dist/*
              touch run_tests.py
              echo "import evogen" >> run_tests.py
              echo "evogen.runTests()" >> run_tests.py
              echo "running python tests"
              python run_tests.py
            displayName: Run Python Tests



# add conda to path in windows
  #             - powershell: Write-Host "##vso[task.prependpath]$env:CONDA\Scripts"
  # displayName: Add conda to PATH
          # add conda to path macOS-10
#   - bash: echo "##vso[task.prependpath]$CONDA/bin"
#   displayName: Add conda to PATH

# # On Hosted macOS, the agent user doesn't have ownership of Miniconda's installation directory/
# # We need to take ownership if we want to update conda or install packages globally
# - bash: sudo chown -R $USER $CONDA
#   displayName: Take ownership of conda installation

          # - script: |
          #     echo "pwd: $(pwd)"
          #     ls
          #     echo "$(Agent.BuildDirectory)"
          #     cd $(Agent.BuildDirectory)/s/build
          #     echo "pwd: $(pwd)"
          #     ls
          #     ctest --verbose --extra-verbose --progress
          #   displayName: RunTests

      # - job: BuildEvogenWindowsRelease
      #   timeoutInMinutes: "0"
      #   displayName: Windows
      #   continueOnError: "false"
      #   pool:
      #     vmImage: "windows-2019"

      #   strategy:
      #     matrix:
      #       64-bit Windows Release:
      #         BuildType: Release
      #         SelfHost: false
      #         CMakeArgs: "-DCMAKE_INSTALL_PREFIX=$(Build.BinariesDirectory)/install-azure-release"
      #         llvm_link: https://github.com/sys-bio/llvm-6.x/releases/download/release%2F6.x/llvm-6.x-msvc2019-x64-release.zip
      #         llvm_zip: llvm-6.x-msvc2019-x64-release.zip
      #         llvm_install: llvm-6.x-msvc2019-x64-release
      #         rr_deps_link: https://github.com/CiaranWelsh/roadrunner-deps/releases/download/v2.0.1/roadrunner-deps-msvc2019-x64-release.zip
      #         rr_deps_zip: roadrunner_deps-msvc2019-x64-release.zip
      #         rr_deps_install: roadrunner-deps-msvc2019-x64-release

      #   steps:
      #     - powershell: |
      #         $ProgressPreference = 'SilentlyContinue'
      #         Invoke-WebRequest $(llvm_link) -OutFile $(llvm_zip)
      #         Expand-Archive  $(llvm_zip) -Destination .
      #         rm $(llvm_zip) # since we are limited to 10gb space per job we clean up zips
      #         echo "pwd: $(pwd)"
      #         dir
      #         cd '$(llvm_install)'
      #         dir
      #       displayName: "Get LLVM"
      #       errorActionPreference: 'stop'
      #     - powershell: |
      #         $ProgressPreference = 'SilentlyContinue'
      #         Invoke-WebRequest $(rr_deps_link) -OutFile $(rr_deps_zip)
      #         Expand-Archive $(rr_deps_zip)  -Destination .
      #         rm $(rr_deps_zip)
      #         echo "pwd: $(pwd)"
      #         dir
      #       errorActionPreference: 'stop'
      #       displayName: "Get Dependencies"
      #     - task: CMake@1
      #       displayName: ConfigureCommand
      #       inputs:
      #         cmakeArgs: $(CMakeArgs) -DRR_DEPENDENCIES_INSTALL_PREFIX="../$(rr_deps_install)" -DLLVM_INSTALL_PREFIX="../$(llvm_install)" -DCMAKE_BUILD_TYPE=$(BuildType)  ..
      #     - task: CMake@1
      #       displayName: BuildRoadrunner
      #       inputs:
      #         cmakeArgs: --build . --config $(BuildType) -j 12
      #     - script: |
      #         echo "pwd: $(pwd)"
      #         ls
      #         cd $(Agent.BuildDirectory)/s/build
      #         echo "pwd: $(pwd)"
      #         ls
      #         ctest --verbose --extra-verbose --progress
      #       displayName: RunTests


      # - job: BuildRoadrunnerMacRelease
      #   timeoutInMinutes: "0"
      #   displayName: MacOS
      #   continueOnError: "false"
      #   pool:
      #     vmImage: 'macOS-10.15'

      #   strategy:
      #     matrix:
      #       64-bit Mac Release:
      #         BuildType: Release
      #         SelfHost: false
      #         CMakeArgs: "-DCMAKE_INSTALL_PREFIX=$(Build.BinariesDirectory)/install-azure-release"
      #         llvm_link: https://github.com/sys-bio/llvm-6.x/releases/download/release%2F6.x/llvm-6.x-clang11.0.3-x64-release.zip
      #         llvm_zip: llvm-6.x-clang11.0.3-x64-release.zip
      #         llvm_install: llvm-6.x-clang11.0.3-x64-release
      #         rr_deps_link: https://github.com/CiaranWelsh/roadrunner-deps/releases/download/v2.0.1/libroadrunner-deps-mac-x64-release.zip
      #         rr_deps_zip: libroadrunner-deps-mac-x64-release.zip
      #         rr_deps_install: libroadrunner-deps-mac-x64-release

      #   steps:
      #     - script: |
      #         echo "current driectory is: "
      #         pwd
      #         echo "doing ls"
      #         ls -lh
      #         wget $(llvm_link)
      #         tar -zxvf $(llvm_zip)
      #         ls
      #       displayName: "Get LLVM"
      #     - script: |
      #         echo "current driectory is: "
      #         pwd
      #         echo "doing ls"
      #         ls -lh
      #         wget $(rr_deps_link)
      #         tar -zxvf $(rr_deps_zip)
      #         ls
      #       displayName: "Get Dependencies"
      #     - task: CMake@1
      #       displayName: ConfigureCommand
      #       inputs:
      #         cmakeArgs: $(CMakeArgs) -DRR_DEPENDENCIES_INSTALL_PREFIX="../$(rr_deps_install)" -DLLVM_INSTALL_PREFIX="../$(llvm_install)" -DCMAKE_BUILD_TYPE=$(BuildType)  ..
      #     - task: CMake@1
      #       displayName: BuildRoadrunner
      #       inputs:
      #         cmakeArgs: --build . --target install --config $(BuildType) -j 12
      #     - script: |
      #         echo "pwd: $(pwd)"
      #         ls
      #         cd $(Agent.BuildDirectory)/s/build
      #         echo "pwd: $(pwd)"
      #         ls
      #         ctest --verbose --extra-verbose --progress
      #       displayName: RunTests

      # - job: BuildRoadrunnerWindowsDebug
      #   timeoutInMinutes: "0"
      #   displayName: Windows
      #   continueOnError: "false"
      #   pool:
      #     vmImage: "windows-2019"

      #   strategy:
      #     matrix:
      #       64-bit Windows Debug:
      #         BuildType: Debug
      #         SelfHost: false
      #         CMakeArgs: "-DCMAKE_INSTALL_PREFIX=$(Build.BinariesDirectory)/install-azure-debug"
      #         llvm_link: https://github.com/sys-bio/llvm-6.x/releases/download/release%2F6.x/llvm-6.x-msvc2019-x64-debug.zip
      #         llvm_zip: llvm-6.x-msvc2019-x64-debug.zip
      #         llvm_install: llvm-6.x-msvc2019-x64-debug
      #         rr_deps_link: https://github.com/CiaranWelsh/roadrunner-deps/releases/download/v2.0.1/roadrunner-deps-msvc2019-x64-debug.zip
      #         rr_deps_zip: roadrunner_deps-msvc2019-x64-debug.zip
      #         rr_deps_install: roadrunner-deps-msvc2019-x64-debug

      #   steps:
      #     - powershell: |
      #         $ProgressPreference = 'SilentlyContinue'
      #         Invoke-WebRequest $(llvm_link) -OutFile $(llvm_zip)
      #         Expand-Archive  $(llvm_zip) -Destination .
      #         rm $(llvm_zip) # since we are limited to 10gb space per job we clean up zips
      #         echo "pwd: $(pwd)"
      #         dir
      #         cd '$(llvm_install)'
      #         dir
      #       displayName: "Get LLVM"
      #       errorActionPreference: 'stop'
      #     - powershell: |
      #         $ProgressPreference = 'SilentlyContinue'
      #         Invoke-WebRequest $(rr_deps_link) -OutFile $(rr_deps_zip)
      #         Expand-Archive $(rr_deps_zip)  -Destination .
      #         rm $(rr_deps_zip)
      #         echo "pwd: $(pwd)"
      #         dir
      #       errorActionPreference: 'stop'
      #       displayName: "Get Dependencies"
      #     - task: CMake@1
      #       displayName: ConfigureCommand
      #       inputs:
      #         cmakeArgs: $(CMakeArgs) -DRR_DEPENDENCIES_INSTALL_PREFIX="../$(rr_deps_install)" -DLLVM_INSTALL_PREFIX="../$(llvm_install)" -DCMAKE_BUILD_TYPE=$(BuildType) ..
      #     - task: CMake@1
      #       displayName: BuildRoadrunner
      #       inputs:
      #         cmakeArgs: --build . --config $(BuildType) -j 12
      #     ## Don't run testing on the debug version--it takes too long.

      # - job: BuildRoadrunnerMacDebug
      #   timeoutInMinutes: "0"
      #   displayName: MacOS
      #   continueOnError: "false"
      #   pool:
      #     vmImage: 'macOS-10.15'

      #   strategy:
      #     matrix:
      #       64-bit Mac Debug:
      #         BuildType: Debug
      #         SelfHost: false
      #         CMakeArgs: "-DCMAKE_INSTALL_PREFIX=$(Build.BinariesDirectory)/install-azure-debug"
      #         llvm_link: https://github.com/sys-bio/llvm-6.x/releases/download/release%2F6.x/llvm-6.x-clang11.0.3-x64-release.zip
      #         llvm_zip: llvm-6.x-clang11.0.3-x64-release.zip
      #         llvm_install: llvm-6.x-clang11.0.3-x64-release
      #         rr_deps_link: https://github.com/CiaranWelsh/roadrunner-deps/releases/download/v2.0.1/libroadrunner-deps-mac-x64-debug.zip
      #         rr_deps_zip: libroadrunner-deps-mac-x64-debug.zip
      #         rr_deps_install: libroadrunner-deps-mac-x64-debug

      #   steps:
      #     - script: |
      #         echo "current driectory is: "
      #         pwd
      #         echo "doing ls"
      #         ls -lh
      #         wget $(llvm_link)
      #         tar -zxvf $(llvm_zip)
      #         ls
      #       displayName: "Get LLVM"
      #     - script: |
      #         echo "current driectory is: "
      #         pwd
      #         echo "doing ls"
      #         ls -lh
      #         wget $(rr_deps_link)
      #         tar -zxvf $(rr_deps_zip)
      #         ls
      #       displayName: "Get Dependencies"
      #     - task: CMake@1
      #       displayName: ConfigureCommand
      #       inputs:
      #         cmakeArgs: $(CMakeArgs) -DRR_DEPENDENCIES_INSTALL_PREFIX="../$(rr_deps_install)" -DLLVM_INSTALL_PREFIX="../$(llvm_install)" -DCMAKE_BUILD_TYPE=$(BuildType)  ..
      #     - task: CMake@1
      #       displayName: BuildRoadrunner
      #       inputs:
      #         cmakeArgs: --build . --target install --config $(BuildType) -j 12
      #     ## Don't run testing on the debug version--it takes too long.
